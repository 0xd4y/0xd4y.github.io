hello everybody this is zero day and this is the first scenario in the cloud go series you start off as a low privileged user named bilbo who can perform iem get in iam list on all resources after enumerating the cloud infrastructure you find that there is a role that you could actually assume and with this role you could actually invoke the vulnerable lambda function you find that there s actually an sql injection vulnerability in the lambda function and as it turns out it s quite handy that this vulnerable lambda function could has the iam attach user policy permissions on the bilbo user so after exporting the lambda function you could actually attach the administrator access managed policy to your user and essentially become an administrator we were provided the credentials of the first user bilbo this is the access key a secret key so let s just put that in i m just gonna configure it uh uh well let s call him bilbo because that s his name and we can put this as his axis key and this as his secret key and we ll keep the default region as us east one and okay so now we are the bilbo user so uh the first thing that we should try is just to enumerate the permissions of this user so we could do that with the iam um and let s do well let s let s list the attached user policies of this user so uh we need the username and to get that uh let s just do uh the caller identity which is basically like who am i but for aws i forgot to put bilbo here and we see that this is the username so let s just put that here and we are the bilbo user i m just gonna close this so it s bigger we see there are no attached user policies now what this looks for is the managed policies well maybe the bilbo user doesn t have manage policies as we can see there actually aren t any but it is possible that there are inline policies uh for this user for this particular identity to be exact uh and we could do that with the list user policies command so uh the main difference between list user policies and list attached user policies is this looks for uh managed policies and this looks for inline policies so this is the inline policy of the bilbo user so we can just get that policy and provide the iam module and the policy arn so get dash policy actually looks for the manage policies and as we figure it out there s actually no manage policies associated with the user so what we do instead is get dash user desk policy and then this looks at the inline policies inline policy is just a policy that s embedded in the identity of the user so two users cannot have the same inline policy the online policy might have the same permissions but it s not the same exact policy usually because of that managed policies are used instead of inline policies in a real environment because of the managed policy you can just change a certain permission of the policy and all the users who have that policy are affected this way with an identity policy if everybody has the same permissions for their specific identity if you wanted to change the permissions for every user you d have to manually go and change that so let s provide the username which we found was cg bilbo all of this and the policy name which if we go back up here it was this this is the inline policy and these are all the permissions for the bilbo user we can see that the bilbo user can do any get commands for any resource and it can list anything for any resource this is specifically for iam it could also simulate the custom policy or simulated principle policy this is not really interesting these two are just used for simulating permissions of a user so it doesn t it can t even create api calls it just tells you if you have permissions to do something or not they re not real api calls okay so we can see this but we can t do we can t escalate privileges with these these permissions alone but because we do have this list permission we should start trying to list maybe roles that are in this cloud infrastructure because maybe there is some role that we can assume so if we do this command we see here there s a lot that a lot to see but this is just a default uh aws police roles these are just aws roles these aren t customer managed or anything but if we look further down we see these two roles which are quite interesting this one and this one so if we look at this role we see that the bilbo user which is right here is allowed to do this command this sts assume roll command and this vulnerable lambda function it s quite convenient that they say that it s a vulnerable but this this vulnerable function can only be assumed from another lambda function so okay let s let s first just uh assume this role and the reason we re able to is because we are this user so let s just assume this role right here so aws sts assume dash role and let s just put our profile and we need the role arn and the role dash session dash name so this is the name right here which we copied and the role arn let s just copy that up here Music and we receive the credentials of this lambda function so that we can actually assume it so let s configure a profile let s call it lambda and let s put these credentials Music now note that there s also this session token credential right here but the aws configure profile command did not ask for a session token now we need this if i show you right here uh dash profile lambda it says the security token including the request is invalid well the reason is because we did not put the session token in so what you can do is you can just go into your credentials file now i won t do that here because i have some credentials in there that i don t want that are kind of secret so uh let s let s just put the session token using an echo command so aws underscore session underscore token equals all of this and let s put that there and let s put that at the end of the credentials file Music okay so now that we have that in there we can do the same command aws sts get dash color dash identity profile lambda and now that worked we didn t get that error okay so what can we even do with this role so remember that we were looking at the inline policies of the bilbo user now there s something that s just like that for users but except for roles so now that we are this role let s look at what the inline policies are for this role and we would do that with this command list dash role that s policies and let s put the role name which is uh Music here i ll just run that command really quick aws i am list roles profile bilbo the role name was this and the what was the other one that it asked for oh just the role name okay right because it s just the list role policies come in and this is the inline policy associated with this uh role now let s before we we look at what that is let s look at what the managed policies are of this so we would do that with list dash attached dash roll dash policies Music and we see there are no managed policies associated with this lambda function so just like with the user there was an inline policy but not a managed policy so let s try to get this policy so aws iam get destroyed policy let s put our profile there and it asks for a role name and a policy name so let s put our role name of this and the policy name we see right here is lambda invoker and we see that these are all the permissions of the lambda function or the lambda role that we assumed so we can list tags we can invoke functions this is a particularly interesting and we can get functions so with the get functions command you can actually get the code associated with the lambda function which is you know typically python you have the t bo2 three module uh you can also get policies lambda get policy and we have this list function event so you can perform all of these commands on this these specific resources on the vulnerable function that we saw earlier but also you can list functions for all resources so that s not just for this function uh and you can do an iam get iam list and basically you have all the permissions of the iam uh bilbo user and you have these assumed rule and which makes sense because we are the bilbo user so that s why we have these permissions but we also have these extra permissions right here from the role that we assumed so let s just uh get this function let s let s see before we try to even exploit this function let s see if it s even worth it that are there permissions associated with this function that we don t even have so this is the role name let s copy that and let s do the same thing we just did with our assumed role but let s do that with this function so aws iam get dash roll dash policy dash roll dash name and let s put our profile and policy name oh right let s first list Music whoops list that s real dash policies Music and this is the inline policy associated with that vulnerable lambda function so let s do that same thing where was it get dash roll and with this policy name so now we see that these are all the policies associated with this vulnerable lambda function we see the iam attach user policy which is particularly interesting because this is a super powerful permission with the attach user policy you are basically granting this role permissions to attach any kind of permissions to another user so maybe we could get the administrator privileges from exploiting this function if we were to somehow assume this role or somehow get the function to give us administrator privileges then we would have it because this function can do that on top of that it also has some s3 permissions logs not anything that interesting we can go back to get objects if this does not work but let s let s look into this function here because this definitely has permissions that we don t have with the assumed role so let s try to invoke this function so we go to aws lambda invoke recall that we have the permissions to do that uh and one moment uh aws lambda invoke function dash name so what is the function name let s let s go back and list the function names like clean up a little bit aws lambda list functions profile oh lambda and the function name is this uh well before we even invoke it we actually have to know what what this function even does so let s get the function first aws get that function lambda profile lambda and put the function name right here and it returns with this a long url and what this url is is just the url to download the source code of this vulnerable function so right here we can save it to download sure and let s move downloads to here make the resource and unzip it so these are are the this is the code associated with this function if we look at main pi which has the code associated with this function we see that the function asks for target policies and it says uh select policy name from policies where policy name equals whatever the input is and public equals true now they re nice enough to put all these comments here to show what is allowed so for example policy name this this would be allowed because the public is true but all of these aren t that interesting these are just read only access permissions what we really want is this administrator access but unfortunately it s false so you see if this is if the state if this is not a valid policy if we put a policy that s not valid such as administrator access then it says it s not an approved policy please only choose from the approved ones it s because of this public equals true thing but if we look closely this looks you know just like an sql statement and what we could do if you look here it looks quite insecure because we can actually break out of these quotation marks by just adding a quotation mark ourselves just like a basic uh sql injection attack so if we look further down is there anything interesting doesn t seem to be anything else so let s just put uh our payload in so aws lambda invoke let s put our profile and we want the function name and we want the out file so the function name was that vulnerable i should really save what the function is called but uh we came this far okay here it is here s the function name uh and we also want the out file let s just call it out txt Music and there was an error unhandled so let s just cap this let s see what it says it wants a payload of course we didn t input any payload so we could do a payload with the dash dash payload flag you could even if you re ever not sure about how a function works just type in the function so for example this invoke and then the help function after that so if we go down to payload we can see that this is like the format of the payload but a much better way a much cleaner way is to just create a payload file and just invoke the payload from that file so let s just call it payload json because everything is in json and we ll say that what what did the function want again they wanted Music a policy names and a username so let s put policy Music underscore names Music and let s put administrator access and we can put user underscore name and let s put our username which is something really long there it is copy this pastes and we close okay let s put this in and see what happens so payload uh our file which is payload json and let s see this time it didn t error out because we actually put a payload in so let s cut that it says a is not an approved policy please only choose from approved policies and don t cheat well a is the first letter of this uh policy name uh i think it s just enumerating it s looking for an array and as you can see it actually is for policy and target policies well we just inputted a string so for policy and target policy policy would be equal to a and then in the next for loop would be d and then m and then i so let s put that into a list just like this and let s see if it says that same thing Music administrator access is not an approved policy and that s because it was set to false if you remember right here and it only wants something that s true so let s do that basic uh sql injection attack by inputting a single quote and just commenting out the rest just like this and now let s see if that happens now before i even run this let s quickly just look at what our permissions are for our current bilbo user so if we go to back to where was it i didn t save the command okay well aws i am get dash user dash policy or first let s list it because i forgot what it was called yeah it s a good idea to save the outputs of your commands so you don t have to constantly do stuff like this and same thing with the sts oh at least i have that right here here s the username and this is the policy name so let s get the user policy and it was policy this right nope just types there we go so these are our current permissions uh and one other thing to show before before we uh do this payload is let s look at the attached user policies of profile bilbo now if you remember uh it doesn t have any managed policies but what we can do is through this function give it a manage policy just like administrator access this was the policy name here is the username Music so no attached policies there are no managed policies associated with this user administrator access is a managed policy uh so let s just put this payload in and it didn t error out let s cat and says all managed policies were applied as expected well let s see if we list the manage policies we see that we are now the administrator so we were able to exploit this vulnerable lambda function because of the bad uh validation on user input so right here it was easy to just put in a single quote so what we re really seeing here is us typing in administrator access and then a single quote here and then space dash which is just a comment in sql so basically the sql statement is seeing just this part right here select policy name from policies where policy name equals administrator access so it s like okay it says okay here you go here s administrator access and we got the administrator access permissions so thank you for watching this video i hope it was a it was helpful in understanding the scenario and also about iam permissions and their security it s very important to to make sure that when you re creating lambda functions especially when a user can invoke it that all the lambda functions are secure because just because a lambda function well is not an iam policy i impulses is the main security weakness in cloud infrastructure that doesn t mean that a vulnerable aimed or that a lambda function cannot be vulnerable so thank you for watching this video and i ll see you in the next one 
